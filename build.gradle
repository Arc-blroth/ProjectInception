plugins {
	id 'fabric-loom' version '0.5.9'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name "jitpack"
		url "https://jitpack.io"
		content {
			includeGroupByRegex "com\\.github\\..*"
		}
	}
	maven {
		name "Panda Repository"
		url "https://repo.panda-lang.org"
	}
}

configurations {
	transitiveInclude
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "com.github.Chocohead:Fabric-ASM:${project.mm_version}"
	include "com.github.Chocohead:Fabric-ASM:${project.mm_version}"
	modApi("io.github.prospector:modmenu:${project.modmenu_version}")  {
		exclude group: "net.fabricmc.fabric-api"
	}
	modApi("com.github.A5b84:dark-loading-screen:v1.4.4") {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "io.github.prospector", module: "modmenu"
	}
	modApi("me.shedaniel.cloth:config-2:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include("me.shedaniel.cloth:config-2:${project.cloth_config_version}")  {
		exclude(group: "net.fabricmc.fabric-api")
	}

	implementation "net.openhft:chronicle-queue:${project.chronicle_queue_version}"
	transitiveInclude("net.openhft:chronicle-queue:${project.chronicle_queue_version}") {
		exclude(group: "net.java.dev.jna")
	}

	implementation "org.slf4j:slf4j-log4j12:${project.slf4j_bridge_version}"
	include "org.slf4j:slf4j-log4j12:${project.slf4j_bridge_version}"

	// All of Pandomium is loaded dynamically in dev
	compileOnly("org.panda-lang:pandomium:${project.pandomium_version}") {
		exclude group: "org.slf4j"
		exclude module: "panda"
		exclude module: "panda-framework"
		exclude module: "panda-utilities"
	}
	// Pandomium natives are loaded dynamically in production
	runtimeOnly("org.panda-lang:pandomium:${project.pandomium_version}") {
		exclude group: "org.slf4j"
		exclude group: "org.panda-lang.pandomium-natives"
		exclude module: "panda"
		exclude module: "pandomium"
		exclude module: "panda-framework"
		exclude module: "panda-utilities"
        exclude module: "linuxenv"
	}
	include "org.tukaani:xz:1.8"

	Set<String> allTransitiveDependencies = []
	def addTransitive
	addTransitive = { ResolvedDependency dep ->
		allTransitiveDependencies.add(dep.name)
		if(dep.children.size() > 0) dep.children.forEach addTransitive
	}
	configurations.transitiveInclude.resolvedConfiguration.firstLevelModuleDependencies.forEach addTransitive
	allTransitiveDependencies.forEach { add("include", it) }
}

/**
 * add our readlink() library to the jar, which fixes
 * chromium's weird resource searching process (see issue-2.md)
 * This is LD_PRELOAD'ed by the mod at runtime on Linux systems.
 */
def getLibProjectInception(boolean is64) {
	def nativeBuildDir = project("native").getBuildDir()
	def arch = is64 ? "x86-64" : "x86"
	def libprojectinception = new File(nativeBuildDir, "lib/main/release/${arch}/libprojectinception.so")
	if(libprojectinception.exists()) {
		return libprojectinception
	} else {
		getLogger().error("libprojectinception.so for ${arch} was not built. "
				+ "ProjectInception will not run correctly on Linux systems!")
		return []
	}
}

processResources {
	dependsOn ":native:assembleRelease"

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand ([
			version: project.version
		])
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}

	from({ getLibProjectInception(false) })
	from({ getLibProjectInception(true)  }) {
		rename { "libprojectinception-x64.so" }
	}
}

minecraft {
	accessWidener = file("src/main/resources/project_inception.aw")
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
//task sourcesJar(type: Jar, dependsOn: classes) {
//	classifier = "sources"
//	from sourceSets.main.allSource
//}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			//artifact(sourcesJar) {
			//	builtBy remapSourcesJar
			//}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
