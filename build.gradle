plugins {
	id 'fabric-loom' version '0.5.9'
	id 'com.github.johnrengelman.shadow' version '6.0.0'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name "jitpack"
		url "https://jitpack.io"
		content {
			includeGroupByRegex "com\\.github\\..*"
		}
	}
}

configurations {
	nest
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "com.github.Chocohead:Fabric-ASM:${project.mm_version}"
	nest "com.github.Chocohead:Fabric-ASM:${project.mm_version}"
	modImplementation("com.github.A5b84:dark-loading-screen:v1.4.4") {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "io.github.prospector", module: "modmenu"
	}
	modRuntime("com.github.A5b84:dark-loading-screen:v1.4.4") {
		exclude group: "net.fabricmc.fabric-api"
		exclude group: "io.github.prospector", module: "modmenu"
	}

	implementation "net.openhft:chronicle-queue:${project.chronicle_queue_version}"
	shadow "net.openhft:chronicle-queue:${project.chronicle_queue_version}"
	implementation "org.slf4j:slf4j-log4j12:${project.slf4j_bridge_version}"
	shadow "org.slf4j:slf4j-log4j12:${project.slf4j_bridge_version}"
	implementation "org.apache.commons:commons-compress:{$project.commons_compress_version}"
	shadow "org.apache.commons:commons-compress:{$project.commons_compress_version}"
}

def getActualShadowedJars = {
	def specifiedDependencies = configurations.nest.dependencies.collect { it.name + "-" + it.version + ".jar" }
	def result = configurations.nest.resolve()
	result.removeIf { !specifiedDependencies.contains(it.name) }
	result
}

processResources {
	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand ([
			version: project.version
		])
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}

	from(getActualShadowedJars) {
		into "META-INF/jars/"
	}

}

minecraft {
	accessWidener = file("src/main/resources/project_inception.aw")
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
//task sourcesJar(type: Jar, dependsOn: classes) {
//	classifier = "sources"
//	from sourceSets.main.allSource
//}

jar {
	from "LICENSE"
}

task removeStuffForShadowJar(type: Delete) {
	delete { // closure for lazy evaluation
		configurations.nest.collect { "${buildDir}/resources/main/META-INF/jars/" + it.getName() }
	}
}

// Shadow Jar stuff based from Hephaestus-Dev
shadowJar {
	dependsOn removeStuffForShadowJar

	configurations = [project.configurations.shadow]
	archiveClassifier.set('shadow')

	// idk why these packages exist in the jar
	exclude 'com/sun/jna/**'
	exclude 'java/**'
	exclude 'org/intellij/**'
	exclude 'org/jetbrains/**'

	relocate "org.apache.commons.compress", "ai.arcblroth.projectInception.shadow.org.apache.commons.compress"
}

remapJar {
	dependsOn shadowJar
	input.set shadowJar.archiveFile.get()

	from(getActualShadowedJars) {
		into "META-INF/jars/"
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			//artifact(sourcesJar) {
			//	builtBy remapSourcesJar
			//}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
